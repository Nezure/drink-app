/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as TestImport } from './routes/test'
import { Route as IndexImport } from './routes/index'
import { Route as DrinksDrinkIdImport } from './routes/drinks/$drinkId'
import { Route as DrinksCreateIndexImport } from './routes/drinks/create/index'

// Create/Update Routes

const TestRoute = TestImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const DrinksDrinkIdRoute = DrinksDrinkIdImport.update({
  id: '/drinks/$drinkId',
  path: '/drinks/$drinkId',
  getParentRoute: () => rootRoute,
} as any)

const DrinksCreateIndexRoute = DrinksCreateIndexImport.update({
  id: '/drinks/create/',
  path: '/drinks/create/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/drinks/$drinkId': {
      id: '/drinks/$drinkId'
      path: '/drinks/$drinkId'
      fullPath: '/drinks/$drinkId'
      preLoaderRoute: typeof DrinksDrinkIdImport
      parentRoute: typeof rootRoute
    }
    '/drinks/create/': {
      id: '/drinks/create/'
      path: '/drinks/create'
      fullPath: '/drinks/create'
      preLoaderRoute: typeof DrinksCreateIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/drinks/$drinkId': typeof DrinksDrinkIdRoute
  '/drinks/create': typeof DrinksCreateIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/drinks/$drinkId': typeof DrinksDrinkIdRoute
  '/drinks/create': typeof DrinksCreateIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/test': typeof TestRoute
  '/drinks/$drinkId': typeof DrinksDrinkIdRoute
  '/drinks/create/': typeof DrinksCreateIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/test' | '/drinks/$drinkId' | '/drinks/create'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/test' | '/drinks/$drinkId' | '/drinks/create'
  id: '__root__' | '/' | '/test' | '/drinks/$drinkId' | '/drinks/create/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  TestRoute: typeof TestRoute
  DrinksDrinkIdRoute: typeof DrinksDrinkIdRoute
  DrinksCreateIndexRoute: typeof DrinksCreateIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  TestRoute: TestRoute,
  DrinksDrinkIdRoute: DrinksDrinkIdRoute,
  DrinksCreateIndexRoute: DrinksCreateIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/test",
        "/drinks/$drinkId",
        "/drinks/create/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/test": {
      "filePath": "test.tsx"
    },
    "/drinks/$drinkId": {
      "filePath": "drinks/$drinkId.tsx"
    },
    "/drinks/create/": {
      "filePath": "drinks/create/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
